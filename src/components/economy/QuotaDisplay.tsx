'use client';

import { EconomyQuotas } from '@/types/quest-economy';

interface QuotaDisplayProps {
  quotas: EconomyQuotas;
  compact?: boolean;
  showDetails?: boolean;
}

function formatTimeLeft(date: Date): string {
  const now = new Date();
  const diffMs = date.getTime() - now.getTime();
  const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
  const diffDays = Math.floor(diffHours / 24);

  if (diffMs < 0) return '–û–±–Ω–æ–≤–ª–µ–Ω–æ';
  if (diffHours < 1) return '–°–∫–æ—Ä–æ';
  if (diffHours < 24) return `${diffHours} —á`;
  return `${diffDays} –¥–Ω`;
}

function getQuotaColor(used: number, limit: number): string {
  const percentage = (used / limit) * 100;
  if (percentage >= 90) return 'red';
  if (percentage >= 70) return 'yellow';
  return 'green';
}

function getQuotaColorClasses(color: string): string {
  switch (color) {
    case 'red':
      return 'bg-red-50 dark:bg-red-900/30 border-red-200 dark:border-red-700 text-red-700 dark:text-red-300';
    case 'yellow':
      return 'bg-yellow-50 dark:bg-yellow-900/30 border-yellow-200 dark:border-yellow-700 text-yellow-700 dark:text-yellow-300';
    case 'green':
      return 'bg-green-50 dark:bg-green-900/30 border-green-200 dark:border-green-700 text-green-700 dark:text-green-300';
    default:
      return 'bg-gray-50 dark:bg-gray-900/30 border-gray-200 dark:border-gray-700 text-gray-700 dark:text-gray-300';
  }
}

function getProgressBarColor(color: string): string {
  switch (color) {
    case 'red':
      return 'bg-red-500';
    case 'yellow':
      return 'bg-yellow-500';
    case 'green':
      return 'bg-green-500';
    default:
      return 'bg-gray-500';
  }
}

export default function QuotaDisplay({ quotas, compact = false, showDetails = true }: QuotaDisplayProps) {
  const quotaTypes = [
    { 
      key: 'daily' as const, 
      label: '–î–Ω–µ–≤–Ω–∞—è', 
      emoji: 'üìÖ', 
      data: quotas.daily,
      description: '–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å'
    },
    { 
      key: 'weekly' as const, 
      label: '–ù–µ–¥–µ–ª—å–Ω–∞—è', 
      emoji: 'üìä', 
      data: quotas.weekly,
      description: '–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é'
    },
    { 
      key: 'monthly' as const, 
      label: '–ú–µ—Å—è—á–Ω–∞—è', 
      emoji: 'üìà', 
      data: quotas.monthly,
      description: '–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü'
    }
  ];

  if (compact) {
    return (
      <div className="flex items-center gap-4">
        {quotaTypes.map(quota => {
          const remaining = quota.data.limit - quota.data.used;
          const color = getQuotaColor(quota.data.used, quota.data.limit);
          
          return (
            <div key={quota.key} className="flex items-center gap-2">
              <span className="text-lg">{quota.emoji}</span>
              <div className="text-sm">
                <span className={`font-bold ${
                  color === 'red' ? 'text-red-600 dark:text-red-400' :
                  color === 'yellow' ? 'text-yellow-600 dark:text-yellow-400' :
                  'text-green-600 dark:text-green-400'
                }`}>
                  {remaining}
                </span>
                <span className="text-gray-500 dark:text-gray-400">
                  /{quota.data.limit}
                </span>
              </div>
            </div>
          );
        })}
      </div>
    );
  }

  return (
    <div className="bg-white dark:bg-gray-800 p-6 rounded-2xl border border-gray-200 dark:border-gray-700 shadow-sm">
      <div className="flex items-center justify-between mb-6">
        <h3 className="text-xl font-bold text-gray-800 dark:text-gray-200">
          üìä –ö–≤–æ—Ç—ã –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏
        </h3>
        <div className="text-sm text-gray-500 dark:text-gray-400">
          –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {quotaTypes.map(quota => {
          const remaining = quota.data.limit - quota.data.used;
          const percentage = (quota.data.used / quota.data.limit) * 100;
          const color = getQuotaColor(quota.data.used, quota.data.limit);
          const colorClasses = getQuotaColorClasses(color);
          const progressColor = getProgressBarColor(color);

          return (
            <div key={quota.key} className={`p-5 rounded-xl border-2 ${colorClasses}`}>
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center gap-3">
                  <span className="text-2xl">{quota.emoji}</span>
                  <div>
                    <h4 className="font-semibold text-lg">{quota.label}</h4>
                    {showDetails && (
                      <p className="text-xs opacity-80">{quota.description}</p>
                    )}
                  </div>
                </div>
              </div>

              {/* –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–∏—Ñ—Ä—ã */}
              <div className="mb-4">
                <div className="flex items-baseline gap-2">
                  <span className="text-3xl font-bold">
                    {remaining}
                  </span>
                  <span className="text-lg opacity-70">
                    / {quota.data.limit}
                  </span>
                </div>
                <p className="text-sm opacity-80 mt-1">
                  {remaining > 0 ? '–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥–∞—Ä–∫–æ–≤' : '–ö–≤–æ—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞'}
                </p>
              </div>

              {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */}
              <div className="mb-4">
                <div className="flex items-center justify-between text-sm mb-2">
                  <span>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ</span>
                  <span className="font-medium">{percentage.toFixed(0)}%</span>
                </div>
                <div className="w-full bg-white/50 dark:bg-gray-700/50 rounded-full h-3 border border-white/70 dark:border-gray-600/70">
                  <div 
                    className={`h-3 rounded-full transition-all duration-500 ${progressColor}`}
                    style={{ width: `${Math.min(percentage, 100)}%` }}
                  />
                </div>
              </div>

              {/* –í—Ä–µ–º—è –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
              <div className="flex items-center justify-between text-sm">
                <span>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑:</span>
                <span className="font-medium">
                  {formatTimeLeft(quota.data.reset_time)}
                </span>
              </div>

              {showDetails && (
                <div className="mt-3 pt-3 border-t border-white/30 dark:border-gray-600/30">
                  <div className="text-xs opacity-80">
                    <div className="flex justify-between">
                      <span>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</span>
                      <span>{quota.data.used}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>–õ–∏–º–∏—Ç:</span>
                      <span>{quota.data.limit}</span>
                    </div>
                  </div>
                </div>
              )}
            </div>
          );
        })}
      </div>

      {/* –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      {showDetails && (
        <div className="mt-6 p-4 bg-blue-50 dark:bg-blue-900/30 rounded-lg border border-blue-200 dark:border-blue-700">
          <h4 className="font-semibold text-blue-800 dark:text-blue-200 mb-2">
            üí° –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–≤–æ—Ç—ã
          </h4>
          <div className="text-sm text-blue-700 dark:text-blue-300 space-y-1">
            <p>‚Ä¢ <strong>–î–Ω–µ–≤–Ω–∞—è –∫–≤–æ—Ç–∞</strong> - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –¥–∞—Ä–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å</p>
            <p>‚Ä¢ <strong>–ù–µ–¥–µ–ª—å–Ω–∞—è –∫–≤–æ—Ç–∞</strong> - –æ–±—â–∏–π –ª–∏–º–∏—Ç –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–∞ –Ω–µ–¥–µ–ª—é</p>
            <p>‚Ä¢ <strong>–ú–µ—Å—è—á–Ω–∞—è –∫–≤–æ—Ç–∞</strong> - –º–∞–∫—Å–∏–º—É–º –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –º–µ—Å—è—Ü</p>
            <p>‚Ä¢ –ö–≤–æ—Ç—ã —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç—Å—è —Å –ø–æ–≤—ã—à–µ–Ω–∏–µ–º —Ä–∞–Ω–≥–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–≤–µ—Å—Ç–æ–≤</p>
          </div>
        </div>
      )}

      {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è */}
      {quotaTypes.some(q => q.data.used >= q.data.limit) && (
        <div className="mt-4 p-4 bg-red-50 dark:bg-red-900/30 rounded-lg border border-red-200 dark:border-red-700">
          <div className="flex items-center gap-3">
            <span className="text-2xl">‚ö†Ô∏è</span>
            <div>
              <h4 className="font-semibold text-red-800 dark:text-red-200">
                –ö–≤–æ—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞
              </h4>
              <p className="text-sm text-red-700 dark:text-red-300">
                –û–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–≤–æ—Ç –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ –ø–æ–≤—ã—Å—å—Ç–µ —Ä–∞–Ω–≥ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤.
              </p>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}