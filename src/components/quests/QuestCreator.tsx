'use client';

import { useState } from 'react';
import { CreateQuestRequest } from '@/types/quest-economy';
import { TouchOptimizedButton } from '../TouchInteractions';

interface QuestCreatorProps {
  currentUserId: string;
  onQuestCreated: () => void;
  onCancel: () => void;
}

const difficultyOptions = [
  { value: 'easy', label: '–õ–µ–≥–∫–æ', emoji: 'üü¢', description: '–ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞, 5-15 –º–∏–Ω—É—Ç' },
  { value: 'medium', label: '–°—Ä–µ–¥–Ω–µ', emoji: 'üü°', description: '–û–±—ã—á–Ω–∞—è –∑–∞–¥–∞—á–∞, 30-60 –º–∏–Ω—É—Ç' },
  { value: 'hard', label: '–°–ª–æ–∂–Ω–æ', emoji: 'üü†', description: '–°–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞, 1-3 —á–∞—Å–∞' },
  { value: 'epic', label: '–≠–ø–∏—á–Ω–æ', emoji: 'üî¥', description: '–û—á–µ–Ω—å —Å–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞, –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –∏–ª–∏ –¥–Ω–µ–π' }
];

const rewardTypeOptions = [
  { value: 'green', label: '–ó–µ–ª–µ–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è', emoji: 'üíö' },
  { value: 'blue', label: '–°–∏–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è', emoji: 'üíô' },
  { value: 'red', label: '–ö—Ä–∞—Å–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è', emoji: '‚ù§Ô∏è' }
];

const defaultCategories = [
  '–î–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞',
  '–†–æ–º–∞–Ω—Ç–∏–∫–∞',
  '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
  '–°–ø–æ—Ä—Ç',
  '–û–±—É—á–µ–Ω–∏–µ',
  '–†–∞–±–æ—Ç–∞',
  '–ó–¥–æ—Ä–æ–≤—å–µ',
  '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ'
];

export default function QuestCreator({ 
  currentUserId,
  onQuestCreated, 
  onCancel
}: QuestCreatorProps) {
  const [formData, setFormData] = useState<CreateQuestRequest>({
    title: '',
    description: '',
    assignee_id: '', // Will be set when partner is selected
    category: defaultCategories[0],
    difficulty: 'easy',
    reward_type: 'green',
    reward_amount: 1,
    experience_reward: 10
  });

  const [isSubmitting, setIsSubmitting] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    if (!formData.title.trim()) {
      newErrors.title = '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    } else if (formData.title.length < 3) {
      newErrors.title = '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞';
    } else if (formData.title.length > 200) {
      newErrors.title = '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 200 —Å–∏–º–≤–æ–ª–æ–≤';
    }

    if (!formData.description.trim()) {
      newErrors.description = '–û–ø–∏—Å–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    } else if (formData.description.length < 10) {
      newErrors.description = '–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤';
    } else if (formData.description.length > 1000) {
      newErrors.description = '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 1000 —Å–∏–º–≤–æ–ª–æ–≤';
    }

    if (formData.reward_amount && (formData.reward_amount < 1 || formData.reward_amount > 100)) {
      newErrors.reward_amount = '–ù–∞–≥—Ä–∞–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100';
    }

    if (formData.due_date && new Date(formData.due_date) <= new Date()) {
      newErrors.due_date = '–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    setIsSubmitting(true);
    try {
      const response = await fetch('/api/quests', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...formData,
          author_id: currentUserId
        })
      });

      if (!response.ok) {
        throw new Error('Failed to create quest');
      }

      onQuestCreated();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const updateFormData = (key: keyof CreateQuestRequest, value: any) => {
    setFormData(prev => ({ ...prev, [key]: value }));
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è
    if (errors[key]) {
      setErrors(prev => ({ ...prev, [key]: '' }));
    }
  };

  const selectedDifficulty = difficultyOptions.find(d => d.value === formData.difficulty);
  const selectedRewardType = rewardTypeOptions.find(r => r.value === formData.reward_type);

  return (
    <div className="space-y-4">
      <div className="text-center">
        <h2 className="text-xl sm:text-2xl font-bold text-gray-800 dark:text-gray-200">
          ‚ö° –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–≤–µ—Å—Ç
        </h2>
        <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
          –°–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        </p>
      </div>

      <form onSubmit={handleSubmit} className="space-y-4 sm:space-y-6">
        {/* Assignee Selection */}
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å *
          </label>
          <input
            type="text"
            value={formData.assignee_id}
            onChange={(e) => updateFormData('assignee_id', e.target.value)}
            placeholder="ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
            className={`w-full px-4 py-3 border rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
              errors.assignee_id ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'
            }`}
          />
          {errors.assignee_id && (
            <p className="mt-1 text-sm text-red-600 dark:text-red-400">{errors.assignee_id}</p>
          )}
        </div>

        {/* –ù–∞–∑–≤–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ */}
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            –ù–∞–∑–≤–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ *
          </label>
          <input
            type="text"
            value={formData.title}
            onChange={(e) => updateFormData('title', e.target.value)}
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —É–∂–∏–Ω –Ω–∞ –¥–≤–æ–∏—Ö"
            className={`w-full px-4 py-3 border rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-blue-500 focus:border-transparent text-base ${
              errors.title ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'
            }`}
          />
          {errors.title && (
            <p className="mt-1 text-sm text-red-600 dark:text-red-400">{errors.title}</p>
          )}
        </div>

        {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            –û–ø–∏—Å–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ *
          </label>
          <textarea
            value={formData.description}
            onChange={(e) => updateFormData('description', e.target.value)}
            placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å..."
            rows={3}
            className={`w-full px-4 py-3 border rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none text-base ${
              errors.description ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'
            }`}
          />
          {errors.description && (
            <p className="mt-1 text-sm text-red-600 dark:text-red-400">{errors.description}</p>
          )}
        </div>

        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          {/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              –ö–∞—Ç–µ–≥–æ—Ä–∏—è
            </label>
            <select
              value={formData.category}
              onChange={(e) => updateFormData('category', e.target.value)}
              className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-blue-500 focus:border-transparent text-base"
            >
              {defaultCategories.map(category => (
                <option key={category} value={category}>
                  {category}
                </option>
              ))}
            </select>
          </div>

          {/* –°–ª–æ–∂–Ω–æ—Å—Ç—å */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              –°–ª–æ–∂–Ω–æ—Å—Ç—å
            </label>
            <select
              value={formData.difficulty}
              onChange={(e) => updateFormData('difficulty', e.target.value)}
              className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-blue-500 focus:border-transparent text-base"
            >
              {difficultyOptions.map(option => (
                <option key={option.value} value={option.value}>
                  {option.emoji} {option.label}
                </option>
              ))}
            </select>
            {selectedDifficulty && (
              <p className="mt-1 text-xs sm:text-sm text-gray-600 dark:text-gray-400">
                {selectedDifficulty.description}
              </p>
            )}
          </div>
        </div>

        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          {/* –¢–∏–ø –Ω–∞–≥—Ä–∞–¥—ã */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              –¢–∏–ø –Ω–∞–≥—Ä–∞–¥—ã
            </label>
            <select
              value={formData.reward_type}
              onChange={(e) => updateFormData('reward_type', e.target.value)}
              className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-blue-500 focus:border-transparent text-base"
            >
              {rewardTypeOptions.map(option => (
                <option key={option.value} value={option.value}>
                  {option.emoji} {option.label}
                </option>
              ))}
            </select>
          </div>

          {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≥—Ä–∞–¥—ã */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≥—Ä–∞–¥—ã
            </label>
            <input
              type="number"
              min="1"
              max="100"
              value={formData.reward_amount}
              onChange={(e) => updateFormData('reward_amount', parseInt(e.target.value))}
              className={`w-full px-4 py-3 border rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-blue-500 focus:border-transparent text-base ${
                errors.reward_amount ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'
              }`}
            />
            {errors.reward_amount && (
              <p className="mt-1 text-sm text-red-600 dark:text-red-400">{errors.reward_amount}</p>
            )}
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* –û–ø—ã—Ç –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              –û–ø—ã—Ç –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            </label>
            <input
              type="number"
              min="0"
              max="1000"
              value={formData.experience_reward}
              onChange={(e) => updateFormData('experience_reward', parseInt(e.target.value))}
              className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>

          {/* –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            </label>
            <input
              type="datetime-local"
              value={formData.due_date ? new Date(formData.due_date).toISOString().slice(0, 16) : ''}
              onChange={(e) => updateFormData('due_date', e.target.value ? new Date(e.target.value) : undefined)}
              className={`w-full px-4 py-3 border rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                errors.due_date ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'
              }`}
            />
            {errors.due_date && (
              <p className="mt-1 text-sm text-red-600 dark:text-red-400">{errors.due_date}</p>
            )}
          </div>
        </div>

        {/* –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–≥—Ä–∞–¥—ã */}
        <div className="p-4 bg-gray-50 dark:bg-gray-700/50 rounded-lg border border-gray-200 dark:border-gray-600">
          <h4 className="font-semibold text-gray-700 dark:text-gray-300 mb-2">–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–≥—Ä–∞–¥—ã:</h4>
          <div className="flex items-center gap-4">
            <div className="flex items-center gap-2">
              <span className="text-lg">{selectedRewardType?.emoji}</span>
              <span className="font-medium text-gray-800 dark:text-gray-200">
                {formData.reward_amount} {selectedRewardType?.label}
              </span>
            </div>
            {formData.experience_reward && formData.experience_reward > 0 && (
              <div className="flex items-center gap-2">
                <span className="text-lg">‚≠ê</span>
                <span className="font-medium text-purple-700 dark:text-purple-300">
                  +{formData.experience_reward} –æ–ø—ã—Ç–∞
                </span>
              </div>
            )}
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ */}
        <div className="flex flex-col sm:flex-row gap-3 pt-4">
          <button
            type="submit"
            disabled={isSubmitting}
            className="flex-1 bg-gradient-to-r from-blue-500 to-purple-500 text-white px-6 py-4 rounded-xl font-medium hover:from-blue-600 hover:to-purple-600 transition-all duration-200 shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed min-h-[56px] text-base"
          >
            {isSubmitting ? '‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ...' : '‚ö° –°–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç'}
          </button>
          <TouchOptimizedButton
            onClick={onCancel}
            variant="secondary"
            size="large"
            className="sm:w-auto"
          >
            –û—Ç–º–µ–Ω–∏—Ç—å
          </TouchOptimizedButton>
        </div>
      </form>
    </div>
  );
}