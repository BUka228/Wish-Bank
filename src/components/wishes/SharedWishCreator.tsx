'use client';

import { useState } from 'react';
import { CreateSharedWishRequest } from '@/types/quest-economy';

interface SharedWishCreatorProps {
  onCreateSharedWish: (wish: CreateSharedWishRequest) => Promise<void>;
  onCancel: () => void;
  partnerName: string;
  categories?: string[];
}

const typeOptions = [
  { value: 'green', label: '–ó–µ–ª–µ–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ', emoji: 'üíö', description: '–ü—Ä–æ—Å—Ç–æ–µ –∂–µ–ª–∞–Ω–∏–µ' },
  { value: 'blue', label: '–°–∏–Ω–µ–µ –∂–µ–ª–∞–Ω–∏–µ', emoji: 'üíô', description: '–°—Ä–µ–¥–Ω–µ–µ –∂–µ–ª–∞–Ω–∏–µ' },
  { value: 'red', label: '–ö—Ä–∞—Å–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ', emoji: '‚ù§Ô∏è', description: '–û—Å–æ–±–æ–µ –∂–µ–ª–∞–Ω–∏–µ' }
];

const priorityOptions = [
  { value: 1, label: '–ù–∏–∑–∫–∏–π', emoji: '‚≠ê', description: '–ö–æ–≥–¥–∞-–Ω–∏–±—É–¥—å' },
  { value: 2, label: '–°—Ä–µ–¥–Ω–∏–π', emoji: '‚≠ê‚≠ê', description: '–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è' },
  { value: 3, label: '–í—ã—Å–æ–∫–∏–π', emoji: '‚≠ê‚≠ê‚≠ê', description: '–ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ' }
];

const defaultCategories = [
  '–†–æ–º–∞–Ω—Ç–∏–∫–∞',
  '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
  '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
  '–ü–æ–¥–∞—Ä–∫–∏',
  '–î–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞',
  '–°–ø–æ—Ä—Ç',
  '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ',
  '–û–±—É—á–µ–Ω–∏–µ'
];

export default function SharedWishCreator({ 
  onCreateSharedWish, 
  onCancel, 
  partnerName,
  categories = defaultCategories 
}: SharedWishCreatorProps) {
  const [formData, setFormData] = useState<CreateSharedWishRequest>({
    type: 'green',
    description: '',
    category: categories[0],
    priority: 2,
    is_historical: false
  });

  const [isSubmitting, setIsSubmitting] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    if (!formData.description.trim()) {
      newErrors.description = '–û–ø–∏—Å–∞–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    } else if (formData.description.length < 5) {
      newErrors.description = '–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤';
    } else if (formData.description.length > 500) {
      newErrors.description = '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤';
    }

    if (formData.is_historical && formData.created_at && new Date(formData.created_at) > new Date()) {
      newErrors.created_at = '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    setIsSubmitting(true);
    try {
      await onCreateSharedWish(formData);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—â–µ–≥–æ –∂–µ–ª–∞–Ω–∏—è:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const updateFormData = (key: keyof CreateSharedWishRequest, value: any) => {
    setFormData(prev => ({ ...prev, [key]: value }));
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è
    if (errors[key]) {
      setErrors(prev => ({ ...prev, [key]: '' }));
    }
  };

  const selectedType = typeOptions.find(t => t.value === formData.type);
  const selectedPriority = priorityOptions.find(p => p.value === formData.priority);

  return (
    <div className="bg-white dark:bg-gray-800 p-6 rounded-2xl border border-gray-200 dark:border-gray-700 shadow-lg">
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-2xl font-bold text-gray-800 dark:text-gray-200">
          ü§ù –°–æ–∑–¥–∞—Ç—å –æ–±—â–µ–µ –∂–µ–ª–∞–Ω–∏–µ
        </h2>
        <button
          onClick={onCancel}
          className="text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200 transition-colors"
        >
          ‚úï
        </button>
      </div>

      <div className="mb-4 p-4 bg-blue-50 dark:bg-blue-900/30 rounded-lg border border-blue-200 dark:border-blue-700">
        <p className="text-sm text-blue-700 dark:text-blue-300">
          <span className="font-semibold">üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:</span> –û–±—â–µ–µ –∂–µ–ª–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {partnerName} –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. 
          –ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ–Ω–æ —Å—Ç–∞–Ω–µ—Ç –≤–∏–¥–∏–º—ã–º –¥–ª—è –≤–∞—Å –æ–±–æ–∏—Ö.
        </p>
      </div>

      <form onSubmit={handleSubmit} className="space-y-6">
        {/* –û–ø–∏—Å–∞–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è */}
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            –û–ø–∏—Å–∞–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è *
          </label>
          <textarea
            value={formData.description}
            onChange={(e) => updateFormData('description', e.target.value)}
            placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—â–µ–µ –∂–µ–ª–∞–Ω–∏–µ..."
            rows={4}
            className={`w-full px-4 py-3 border rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none ${
              errors.description ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'
            }`}
          />
          {errors.description && (
            <p className="mt-1 text-sm text-red-600 dark:text-red-400">{errors.description}</p>
          )}
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* –¢–∏–ø –∂–µ–ª–∞–Ω–∏—è */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              –¢–∏–ø –∂–µ–ª–∞–Ω–∏—è
            </label>
            <select
              value={formData.type}
              onChange={(e) => updateFormData('type', e.target.value)}
              className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              {typeOptions.map(option => (
                <option key={option.value} value={option.value}>
                  {option.emoji} {option.label}
                </option>
              ))}
            </select>
            {selectedType && (
              <p className="mt-1 text-sm text-gray-600 dark:text-gray-400">
                {selectedType.description}
              </p>
            )}
          </div>

          {/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              –ö–∞—Ç–µ–≥–æ—Ä–∏—è
            </label>
            <select
              value={formData.category}
              onChange={(e) => updateFormData('category', e.target.value)}
              className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              {categories.map(category => (
                <option key={category} value={category}>
                  {category}
                </option>
              ))}
            </select>
          </div>
        </div>

        {/* –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç */}
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
          </label>
          <select
            value={formData.priority}
            onChange={(e) => updateFormData('priority', parseInt(e.target.value))}
            className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            {priorityOptions.map(option => (
              <option key={option.value} value={option.value}>
                {option.emoji} {option.label}
              </option>
            ))}
          </select>
          {selectedPriority && (
            <p className="mt-1 text-sm text-gray-600 dark:text-gray-400">
              {selectedPriority.description}
            </p>
          )}
        </div>

        {/* –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –∂–µ–ª–∞–Ω–∏–µ */}
        <div className="space-y-4">
          <label className="flex items-center gap-3">
            <input
              type="checkbox"
              checked={formData.is_historical}
              onChange={(e) => updateFormData('is_historical', e.target.checked)}
              className="rounded border-gray-300 dark:border-gray-600 text-blue-600 focus:ring-blue-500"
            />
            <div>
              <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
                üìö –≠—Ç–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –∂–µ–ª–∞–Ω–∏–µ
              </span>
              <p className="text-xs text-gray-600 dark:text-gray-400">
                –ñ–µ–ª–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
              </p>
            </div>
          </label>

          {formData.is_historical && (
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
              </label>
              <input
                type="date"
                value={formData.created_at ? new Date(formData.created_at).toISOString().split('T')[0] : ''}
                onChange={(e) => updateFormData('created_at', e.target.value ? new Date(e.target.value) : undefined)}
                max={new Date().toISOString().split('T')[0]}
                className={`w-full px-4 py-3 border rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                  errors.created_at ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'
                }`}
              />
              {errors.created_at && (
                <p className="mt-1 text-sm text-red-600 dark:text-red-400">{errors.created_at}</p>
              )}
            </div>
          )}
        </div>

        {/* –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä */}
        <div className="p-4 bg-gray-50 dark:bg-gray-700/50 rounded-lg border border-gray-200 dark:border-gray-600">
          <h4 className="font-semibold text-gray-700 dark:text-gray-300 mb-2">–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:</h4>
          <div className="flex items-center gap-4">
            <div className="flex items-center gap-2">
              <span className="text-lg">{selectedType?.emoji}</span>
              <span className="font-medium text-gray-800 dark:text-gray-200">
                {selectedType?.label}
              </span>
            </div>
            <div className="flex items-center gap-2">
              <span className="text-lg">{selectedPriority?.emoji}</span>
              <span className="font-medium text-gray-800 dark:text-gray-200">
                {selectedPriority?.label} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
              </span>
            </div>
            <div className="flex items-center gap-2">
              <span className="text-lg">üìÇ</span>
              <span className="font-medium text-gray-800 dark:text-gray-200">
                {formData.category}
              </span>
            </div>
            {formData.is_historical && (
              <div className="flex items-center gap-2">
                <span className="text-lg">üìö</span>
                <span className="font-medium text-purple-700 dark:text-purple-300">
                  –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ
                </span>
              </div>
            )}
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ */}
        <div className="flex gap-4 pt-4">
          <button
            type="submit"
            disabled={isSubmitting}
            className="flex-1 bg-gradient-to-r from-purple-500 to-pink-500 text-white px-6 py-3 rounded-xl font-medium hover:from-purple-600 hover:to-pink-600 transition-all duration-200 shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isSubmitting ? '‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞...' : 'ü§ù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ'}
          </button>
          <button
            type="button"
            onClick={onCancel}
            className="px-6 py-3 bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-200 rounded-xl font-medium hover:bg-gray-50 dark:hover:bg-gray-600 border-2 border-gray-200 dark:border-gray-600 hover:border-gray-300 dark:hover:border-gray-500 transition-all duration-200"
          >
            –û—Ç–º–µ–Ω–∏—Ç—å
          </button>
        </div>
      </form>
    </div>
  );
}