'use client';

import { useState, useEffect } from 'react';

interface ExperienceActivity {
  id: string;
  type: 'quest_completed' | 'event_completed' | 'wish_gifted' | 'quest_created' | 'daily_bonus' | 'streak_bonus';
  description: string;
  experience_gained: number;
  multiplier?: number;
  base_experience?: number;
  created_at: Date;
  metadata?: Record<string, any>;
}

interface ExperienceTrackerProps {
  currentUserId: string;
  showRecent?: boolean;
  compact?: boolean;
}

const activityConfig = {
  quest_completed: {
    icon: '‚ö°',
    label: '–ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω',
    color: 'blue',
    baseExp: 50
  },
  event_completed: {
    icon: 'üé≤',
    label: '–°–æ–±—ã—Ç–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ',
    color: 'purple',
    baseExp: 30
  },
  wish_gifted: {
    icon: 'üéÅ',
    label: '–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
    color: 'green',
    baseExp: 10
  },
  quest_created: {
    icon: 'üìù',
    label: '–ö–≤–µ—Å—Ç —Å–æ–∑–¥–∞–Ω',
    color: 'orange',
    baseExp: 20
  },
  daily_bonus: {
    icon: 'üìÖ',
    label: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å',
    color: 'yellow',
    baseExp: 25
  },
  streak_bonus: {
    icon: 'üî•',
    label: '–ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é',
    color: 'red',
    baseExp: 0
  }
};

const getColorClasses = (color: string): string => {
  switch (color) {
    case 'blue':
      return 'bg-blue-50 dark:bg-blue-900/30 border-blue-200 dark:border-blue-700 text-blue-700 dark:text-blue-300';
    case 'purple':
      return 'bg-purple-50 dark:bg-purple-900/30 border-purple-200 dark:border-purple-700 text-purple-700 dark:text-purple-300';
    case 'green':
      return 'bg-green-50 dark:bg-green-900/30 border-green-200 dark:border-green-700 text-green-700 dark:text-green-300';
    case 'orange':
      return 'bg-orange-50 dark:bg-orange-900/30 border-orange-200 dark:border-orange-700 text-orange-700 dark:text-orange-300';
    case 'yellow':
      return 'bg-yellow-50 dark:bg-yellow-900/30 border-yellow-200 dark:border-yellow-700 text-yellow-700 dark:text-yellow-300';
    case 'red':
      return 'bg-red-50 dark:bg-red-900/30 border-red-200 dark:border-red-700 text-red-700 dark:text-red-300';
    default:
      return 'bg-gray-50 dark:bg-gray-900/30 border-gray-200 dark:border-gray-700 text-gray-700 dark:text-gray-300';
  }
};

function formatTimeAgo(date: Date): string {
  const now = new Date();
  const diffMs = now.getTime() - date.getTime();
  const diffMins = Math.floor(diffMs / 60000);
  const diffHours = Math.floor(diffMs / 3600000);
  const diffDays = Math.floor(diffMs / 86400000);

  if (diffMins < 1) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
  if (diffMins < 60) return `${diffMins} –º–∏–Ω –Ω–∞–∑–∞–¥`;
  if (diffHours < 24) return `${diffHours} —á –Ω–∞–∑–∞–¥`;
  if (diffDays < 7) return `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;
  return date.toLocaleDateString('ru-RU');
}

export default function ExperienceTracker({ 
  currentUserId, 
  showRecent = true, 
  compact = false 
}: ExperienceTrackerProps) {
  const [activities, setActivities] = useState<ExperienceActivity[]>([]);
  const [todayExp, setTodayExp] = useState(0);
  const [weekExp, setWeekExp] = useState(0);
  const [monthExp, setMonthExp] = useState(0);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–ø—ã—Ç–∞
  const loadExperienceData = async () => {
    try {
      setLoading(true);
      
      const response = await fetch('/api/experience/activities');
      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–ø—ã—Ç–µ');
      }
      
      const data = await response.json();
      setActivities(data.activities || []);
      
      // –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const now = new Date();
      const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
      const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
      const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
      
      const todayActivities = data.activities.filter((a: ExperienceActivity) => 
        new Date(a.created_at) >= today
      );
      const weekActivities = data.activities.filter((a: ExperienceActivity) => 
        new Date(a.created_at) >= weekAgo
      );
      const monthActivities = data.activities.filter((a: ExperienceActivity) => 
        new Date(a.created_at) >= monthAgo
      );
      
      setTodayExp(todayActivities.reduce((sum: number, a: ExperienceActivity) => sum + a.experience_gained, 0));
      setWeekExp(weekActivities.reduce((sum: number, a: ExperienceActivity) => sum + a.experience_gained, 0));
      setMonthExp(monthActivities.reduce((sum: number, a: ExperienceActivity) => sum + a.experience_gained, 0));
      
    } catch (err) {
      setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadExperienceData();
  }, []);

  if (loading) {
    return (
      <div className="flex items-center justify-center p-8">
        <div className="text-center">
          <div className="animate-spin text-3xl mb-3">‚≠ê</div>
          <p className="text-gray-600 dark:text-gray-400">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–µ—Ä–∞ –æ–ø—ã—Ç–∞...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-50 dark:bg-red-900/30 border border-red-200 dark:border-red-700 rounded-2xl p-6">
        <div className="flex items-center gap-3">
          <span className="text-2xl">‚ùå</span>
          <div>
            <h3 className="font-semibold text-red-800 dark:text-red-200">–û—à–∏–±–∫–∞</h3>
            <p className="text-red-700 dark:text-red-300">{error}</p>
          </div>
        </div>
        <button
          onClick={loadExperienceData}
          className="mt-4 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
        >
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
      </div>
    );
  }

  if (compact) {
    return (
      <div className="bg-white dark:bg-gray-800 p-4 rounded-xl border border-gray-200 dark:border-gray-700">
        <div className="flex items-center justify-between mb-3">
          <h4 className="font-semibold text-gray-700 dark:text-gray-300">‚≠ê –û–ø—ã—Ç</h4>
          <div className="text-sm text-gray-600 dark:text-gray-400">
            –°–µ–≥–æ–¥–Ω—è: +{todayExp}
          </div>
        </div>
        
        {activities.slice(0, 3).map((activity) => {
          const config = activityConfig[activity.type];
          return (
            <div key={activity.id} className="flex items-center justify-between py-2 border-b border-gray-100 dark:border-gray-700 last:border-b-0">
              <div className="flex items-center gap-2">
                <span className="text-lg">{config.icon}</span>
                <span className="text-sm text-gray-700 dark:text-gray-300">
                  {activity.description}
                </span>
              </div>
              <span className="text-sm font-medium text-green-600 dark:text-green-400">
                +{activity.experience_gained}
              </span>
            </div>
          );
        })}
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—ã—Ç–∞ */}
      <div className="bg-white dark:bg-gray-800 p-6 rounded-2xl border border-gray-200 dark:border-gray-700 shadow-sm">
        <h2 className="text-2xl font-bold text-gray-800 dark:text-gray-200 mb-6">
          ‚≠ê –¢—Ä–µ–∫–µ—Ä –æ–ø—ã—Ç–∞
        </h2>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="bg-green-50 dark:bg-green-900/30 p-5 rounded-xl border border-green-200 dark:border-green-700">
            <div className="flex items-center gap-3 mb-3">
              <span className="text-2xl">üìÖ</span>
              <h3 className="font-semibold text-green-800 dark:text-green-200">–°–µ–≥–æ–¥–Ω—è</h3>
            </div>
            <div className="text-3xl font-bold text-green-600 dark:text-green-400 mb-2">
              +{todayExp}
            </div>
            <div className="text-sm text-green-700 dark:text-green-300">
              –æ–ø—ã—Ç–∞ –ø–æ–ª—É—á–µ–Ω–æ
            </div>
          </div>

          <div className="bg-blue-50 dark:bg-blue-900/30 p-5 rounded-xl border border-blue-200 dark:border-blue-700">
            <div className="flex items-center gap-3 mb-3">
              <span className="text-2xl">üìä</span>
              <h3 className="font-semibold text-blue-800 dark:text-blue-200">–ó–∞ –Ω–µ–¥–µ–ª—é</h3>
            </div>
            <div className="text-3xl font-bold text-blue-600 dark:text-blue-400 mb-2">
              +{weekExp}
            </div>
            <div className="text-sm text-blue-700 dark:text-blue-300">
              –æ–ø—ã—Ç–∞ –ø–æ–ª—É—á–µ–Ω–æ
            </div>
          </div>

          <div className="bg-purple-50 dark:bg-purple-900/30 p-5 rounded-xl border border-purple-200 dark:border-purple-700">
            <div className="flex items-center gap-3 mb-3">
              <span className="text-2xl">üìà</span>
              <h3 className="font-semibold text-purple-800 dark:text-purple-200">–ó–∞ –º–µ—Å—è—Ü</h3>
            </div>
            <div className="text-3xl font-bold text-purple-600 dark:text-purple-400 mb-2">
              +{monthExp}
            </div>
            <div className="text-sm text-purple-700 dark:text-purple-300">
              –æ–ø—ã—Ç–∞ –ø–æ–ª—É—á–µ–Ω–æ
            </div>
          </div>
        </div>
      </div>

      {/* –ù–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å */}
      {showRecent && activities.length > 0 && (
        <div className="bg-white dark:bg-gray-800 p-6 rounded-2xl border border-gray-200 dark:border-gray-700 shadow-sm">
          <h3 className="text-xl font-bold text-gray-800 dark:text-gray-200 mb-6">
            üèÉ‚Äç‚ôÇÔ∏è –ù–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
          </h3>
          
          <div className="space-y-3">
            {activities.slice(0, 10).map((activity) => {
              const config = activityConfig[activity.type];
              const colorClasses = getColorClasses(config.color);
              
              return (
                <div key={activity.id} className={`p-4 rounded-lg border ${colorClasses}`}>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-4">
                      <div className="w-12 h-12 bg-white dark:bg-gray-700 rounded-xl flex items-center justify-center border border-gray-200 dark:border-gray-600">
                        <span className="text-2xl">{config.icon}</span>
                      </div>
                      <div>
                        <div className="font-medium text-gray-800 dark:text-gray-200">
                          {activity.description}
                        </div>
                        <div className="text-sm text-gray-600 dark:text-gray-400">
                          {formatTimeAgo(new Date(activity.created_at))}
                        </div>
                        {activity.multiplier && activity.multiplier > 1 && (
                          <div className="text-xs text-orange-600 dark:text-orange-400 mt-1">
                            –ú–Ω–æ–∂–∏—Ç–µ–ª—å: √ó{activity.multiplier} 
                            {activity.base_experience && (
                              <span className="ml-1">
                                ({activity.base_experience} ‚Üí {activity.experience_gained})
                              </span>
                            )}
                          </div>
                        )}
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="text-2xl font-bold text-green-600 dark:text-green-400">
                        +{activity.experience_gained}
                      </div>
                      <div className="text-sm text-gray-600 dark:text-gray-400">
                        –æ–ø—ã—Ç–∞
                      </div>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      )}

      {/* –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –æ–ø—ã—Ç–∞ */}
      <div className="bg-white dark:bg-gray-800 p-6 rounded-2xl border border-gray-200 dark:border-gray-700 shadow-sm">
        <h3 className="text-xl font-bold text-gray-800 dark:text-gray-200 mb-6">
          üìã –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –æ–ø—ã—Ç–∞
        </h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {Object.entries(activityConfig).map(([type, config]) => (
            <div key={type} className={`p-4 rounded-lg border ${getColorClasses(config.color)}`}>
              <div className="flex items-center gap-3 mb-2">
                <span className="text-2xl">{config.icon}</span>
                <h4 className="font-semibold">{config.label}</h4>
              </div>
              <div className="text-sm opacity-90">
                –ë–∞–∑–æ–≤—ã–π –æ–ø—ã—Ç: <span className="font-medium">+{config.baseExp}</span>
                {config.baseExp > 0 && (
                  <div className="text-xs mt-1 opacity-75">
                    –ú–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å—Å—è –º–Ω–æ–∂–∏—Ç–µ–ª—è–º–∏ –∏ –±–æ–Ω—É—Å–∞–º–∏
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* –°–æ–≤–µ—Ç—ã –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é –æ–ø—ã—Ç–∞ */}
      <div className="bg-white dark:bg-gray-800 p-6 rounded-2xl border border-gray-200 dark:border-gray-700 shadow-sm">
        <h3 className="text-xl font-bold text-gray-800 dark:text-gray-200 mb-4">
          üí° –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –æ–ø—ã—Ç–∞
        </h3>
        
        <div className="space-y-3">
          <div className="p-4 bg-blue-50 dark:bg-blue-900/30 rounded-lg border border-blue-200 dark:border-blue-700">
            <h4 className="font-semibold text-blue-800 dark:text-blue-200 mb-2">‚ö° –í—ã–ø–æ–ª–Ω—è–π—Ç–µ —Å–ª–æ–∂–Ω—ã–µ –∫–≤–µ—Å—Ç—ã</h4>
            <p className="text-sm text-blue-700 dark:text-blue-300">
              –ö–≤–µ—Å—Ç—ã –≤—ã—Å–æ–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–∞—é—Ç –±–æ–ª—å—à–µ –æ–ø—ã—Ç–∞. –≠–ø–∏—á–Ω—ã–µ –∫–≤–µ—Å—Ç—ã –º–æ–≥—É—Ç –¥–∞–≤–∞—Ç—å –¥–æ 200+ –æ–ø—ã—Ç–∞.
            </p>
          </div>
          
          <div className="p-4 bg-green-50 dark:bg-green-900/30 rounded-lg border border-green-200 dark:border-green-700">
            <h4 className="font-semibold text-green-800 dark:text-green-200 mb-2">üî• –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Å–µ—Ä–∏–∏</h4>
            <p className="text-sm text-green-700 dark:text-green-300">
              –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞—é—Ç –±–æ–Ω—É—Å–Ω—ã–π –æ–ø—ã—Ç –∏ –º–Ω–æ–∂–∏—Ç–µ–ª–∏.
            </p>
          </div>
          
          <div className="p-4 bg-purple-50 dark:bg-purple-900/30 rounded-lg border border-purple-200 dark:border-purple-700">
            <h4 className="font-semibold text-purple-800 dark:text-purple-200 mb-2">üé≤ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Å–æ–±—ã—Ç–∏—è—Ö</h4>
            <p className="text-sm text-purple-700 dark:text-purple-300">
              –°–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è - –æ—Ç–ª–∏—á–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–ø—ã—Ç –±–µ–∑ –±–æ–ª—å—à–∏—Ö —É—Å–∏–ª–∏–π.
            </p>
          </div>
          
          <div className="p-4 bg-orange-50 dark:bg-orange-900/30 rounded-lg border border-orange-200 dark:border-orange-700">
            <h4 className="font-semibold text-orange-800 dark:text-orange-200 mb-2">üéÅ –î–∞—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–∫–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ</h4>
            <p className="text-sm text-orange-700 dark:text-orange-300">
              –ö–∞–∂–¥—ã–π –ø–æ–¥–∞—Ä–æ–∫ –¥–∞–µ—Ç –æ–ø—ã—Ç, –∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –¥–∞—Ä–µ–Ω–∏–µ –º–æ–∂–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}