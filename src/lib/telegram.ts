// Telegram Bot –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
let bot: any = null;

function getBot() {
  if (!bot && typeof window === 'undefined') {
    const TelegramBot = require('node-telegram-bot-api');
    bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN!, { polling: false });
  }
  return bot;
}

export interface TelegramUser {
  id: number;
  first_name: string;
  last_name?: string;
  username?: string;
}

export async function sendNotification(chatId: string, message: string, options: any = {}) {
  try {
    const telegramBot = getBot();
    if (telegramBot) {
      const defaultOptions = { parse_mode: 'HTML' };
      await telegramBot.sendMessage(chatId, message, { ...defaultOptions, ...options });
    }
  } catch (error) {
    console.error('Telegram notification error:', error);
    throw error;
  }
}

// Enhanced notification types for different scenarios
export async function sendQuestNotification(
  chatId: string,
  questType: 'created' | 'completed' | 'expired' | 'reminder',
  questTitle: string,
  details: any = {}
) {
  const emojis = {
    created: 'üéØ',
    completed: '‚úÖ',
    expired: '‚è∞',
    reminder: '‚è≥'
  };
  
  const titles = {
    created: '–ù–æ–≤—ã–π –∫–≤–µ—Å—Ç!',
    completed: '–ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω!',
    expired: '–ö–≤–µ—Å—Ç –∏—Å—Ç–µ–∫',
    reminder: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–≤–µ—Å—Ç–µ'
  };
  
  let message = `${emojis[questType]} <b>${titles[questType]}</b>\n\n`;
  message += `–ö–≤–µ—Å—Ç: ${questTitle}\n`;
  
  if (details.reward_amount) {
    message += `–ù–∞–≥—Ä–∞–¥–∞: ${details.reward_amount} ${details.reward_type}\n`;
  }
  
  if (details.experience_reward) {
    message += `–û–ø—ã—Ç: +${details.experience_reward}\n`;
  }
  
  if (details.expires_at && questType === 'reminder') {
    const hoursLeft = Math.ceil((new Date(details.expires_at).getTime() - new Date().getTime()) / (1000 * 60 * 60));
    message += `–û—Å—Ç–∞–ª–æ—Å—å: ${hoursLeft} —á.\n`;
  }
  
  message += '\nüéØ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞–º–∏';
  
  await sendNotification(chatId, message, createWebAppKeyboard());
}

export async function sendEventNotification(
  chatId: string,
  eventType: 'available' | 'completed' | 'expired' | 'reminder',
  eventTitle: string,
  details: any = {}
) {
  const emojis = {
    available: 'üé≤',
    completed: 'üéâ',
    expired: '‚è∞',
    reminder: '‚è≥'
  };
  
  const titles = {
    available: '–ù–æ–≤–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ!',
    completed: '–°–æ–±—ã—Ç–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!',
    expired: '–°–æ–±—ã—Ç–∏–µ –∏—Å—Ç–µ–∫–ª–æ',
    reminder: '–°–æ–±—ã—Ç–∏–µ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç'
  };
  
  let message = `${emojis[eventType]} <b>${titles[eventType]}</b>\n\n`;
  message += `–°–æ–±—ã—Ç–∏–µ: ${eventTitle}\n`;
  
  if (details.reward_amount) {
    message += `–ù–∞–≥—Ä–∞–¥–∞: ${details.reward_amount} ${details.reward_type}\n`;
  }
  
  if (details.experience_reward) {
    message += `–û–ø—ã—Ç: +${details.experience_reward}\n`;
  }
  
  if (eventType === 'reminder' && details.hours_remaining) {
    message += `–û—Å—Ç–∞–ª–æ—Å—å: ${details.hours_remaining} —á.\n`;
  }
  
  message += '\nüéØ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É—á–∞—Å—Ç–∏—è';
  
  await sendNotification(chatId, message, createWebAppKeyboard());
}

export async function sendRankNotification(
  chatId: string,
  oldRank: string,
  newRank: string,
  experience: number
) {
  const message = `üèÜ <b>–ü–æ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞!</b>\n\n` +
    `–í–∞—à —Ä–∞–Ω–≥ –ø–æ–≤—ã—à–µ–Ω:\n` +
    `${oldRank} ‚Üí ${newRank}\n\n` +
    `–¢–µ–∫—É—â–∏–π –æ–ø—ã—Ç: ${experience}\n\n` +
    `üéØ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º!`;
    
  await sendNotification(chatId, message, createWebAppKeyboard());
}

export async function sendManaNotification(
  chatId: string,
  type: 'earned' | 'spent' | 'exchange',
  amount: number,
  reason: string,
  balance?: number
) {
  const emojis = {
    earned: 'üí∞',
    spent: 'üí∏',
    exchange: 'üîÑ'
  };
  
  const titles = {
    earned: '–ú–∞–Ω–∞ –ø–æ–ª—É—á–µ–Ω–∞!',
    spent: '–ú–∞–Ω–∞ –ø–æ—Ç—Ä–∞—á–µ–Ω–∞',
    exchange: '–û–±–º–µ–Ω –≤–∞–ª—é—Ç'
  };
  
  let message = `${emojis[type]} <b>${titles[type]}</b>\n\n`;
  
  if (type === 'earned') {
    message += `+${amount} –º–∞–Ω—ã\n`;
  } else if (type === 'spent') {
    message += `-${amount} –º–∞–Ω—ã\n`;
  } else {
    message += `–û–±–º–µ–Ω—è–Ω–æ: ${amount} –º–∞–Ω—ã\n`;
  }
  
  message += `–ü—Ä–∏—á–∏–Ω–∞: ${reason}\n`;
  
  if (balance !== undefined) {
    message += `–ë–∞–ª–∞–Ω—Å: ${balance} –º–∞–Ω—ã\n`;
  }
  
  message += '\nüéØ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫–æ–Ω–æ–º–∏–∫–æ–π';
  
  await sendNotification(chatId, message, createWebAppKeyboard());
}

export async function sendSharedWishNotification(
  chatId: string,
  type: 'created' | 'progress' | 'completed' | 'expired' | 'reminder',
  wishDescription: string,
  details: any = {}
) {
  const emojis = {
    created: 'üåü',
    progress: 'üìà',
    completed: 'üéâ',
    expired: '‚è∞',
    reminder: '‚è≥'
  };
  
  const titles = {
    created: '–ù–æ–≤–æ–µ –æ–±—â–µ–µ –∂–µ–ª–∞–Ω–∏–µ!',
    progress: '–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—â–µ–≥–æ –∂–µ–ª–∞–Ω–∏—è',
    completed: '–û–±—â–µ–µ –∂–µ–ª–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!',
    expired: '–û–±—â–µ–µ –∂–µ–ª–∞–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ',
    reminder: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–±—â–µ–º –∂–µ–ª–∞–Ω–∏–∏'
  };
  
  let message = `${emojis[type]} <b>${titles[type]}</b>\n\n`;
  
  if (type === 'created') {
    message += `–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –æ–±—â–µ–µ –∂–µ–ª–∞–Ω–∏–µ:\n"${wishDescription.substring(0, 100)}${wishDescription.length > 100 ? '...' : ''}"\n\n`;
    if (details.collective_reward > 0) {
      message += `–ù–∞–≥—Ä–∞–¥–∞: ${details.collective_reward} –º–∞–Ω—ã\n`;
    }
  } else if (type === 'progress') {
    message += `"${wishDescription.substring(0, 80)}..."\n\n`;
    if (details.participant_name) {
      message += `${details.participant_name} –≤–Ω–µ—Å –≤–∫–ª–∞–¥\n`;
    }
    if (details.progress) {
      message += `–ü—Ä–æ–≥—Ä–µ—Å—Å: ${details.progress}%\n`;
    }
  } else if (type === 'completed') {
    message += `"${wishDescription.substring(0, 80)}..."\n\n`;
    message += `–ñ–µ–ª–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n`;
    if (details.collective_reward > 0) {
      message += `–í—ã –ø–æ–ª—É—á–∏–ª–∏ ${details.collective_reward} –º–∞–Ω—ã!\n`;
    }
  }
  
  message += '\nüéØ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞';
  
  await sendNotification(chatId, message, createWebAppKeyboard());
}

export async function sendSystemNotification(
  chatId: string,
  title: string,
  message: string,
  priority: 'low' | 'normal' | 'high' | 'urgent' = 'normal'
) {
  const emojis = {
    low: '‚ÑπÔ∏è',
    normal: 'üì¢',
    high: '‚ö†Ô∏è',
    urgent: 'üö®'
  };
  
  const fullMessage = `${emojis[priority]} <b>${title}</b>\n\n${message}`;
  
  await sendNotification(chatId, fullMessage, createWebAppKeyboard());
}

// Function to get user's Telegram chat ID from user ID
export async function getUserTelegramChatId(userId: string): Promise<string | null> {
  try {
    // This would typically query the database to get the user's Telegram chat ID
    // For now, we'll assume the user ID is the Telegram chat ID
    // In a real implementation, you'd query your users table
    const { sql } = require('./db-pool');
    const result = await sql`
      SELECT telegram_id FROM users WHERE id = ${userId}
    `;
    
    if (result.length > 0 && result[0].telegram_id) {
      return result[0].telegram_id.toString();
    }
    
    return null;
  } catch (error) {
    console.error('Error getting user Telegram chat ID:', error);
    return null;
  }
}

export async function sendWishNotification(
  chatId: string,
  wishType: 'green' | 'blue' | 'red',
  description: string,
  fromUser: string
) {
  const emoji = {
    green: 'üíö',
    blue: 'üíô',
    red: '‚ù§Ô∏è'
  };
  
  const message = `${emoji[wishType]} <b>–ù–æ–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ!</b>\n\n` +
    `–û—Ç: ${fromUser}\n` +
    `–ñ–µ–ª–∞–Ω–∏–µ: ${description}\n\n` +
    `–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è–º–∏`;
    
  await sendNotification(chatId, message);
}

export async function sendBalanceUpdate(
  chatId: string,
  wishType: 'green' | 'blue' | 'red',
  amount: number,
  reason: string
) {
  const emoji = {
    green: 'üíö',
    blue: 'üíô',
    red: '‚ù§Ô∏è'
  };
  
  const message = `${emoji[wishType]} <b>–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n` +
    `+${amount} ${wishType} –∂–µ–ª–∞–Ω–∏–µ\n` +
    `–ü—Ä–∏—á–∏–Ω–∞: ${reason}`;
    
  await sendNotification(chatId, message);
}

export function createWebAppKeyboard() {
  return {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: 'üéØ –û—Ç–∫—Ä—ã—Ç—å –ë–∞–Ω–∫ –ñ–µ–ª–∞–Ω–∏–π',
            web_app: { url: process.env.VERCEL_URL || 'https://your-app.vercel.app' }
          }
        ]
      ]
    }
  };
}

export async function handleTelegramCommand(
  command: string,
  _args: string[],
  _user: TelegramUser,
  _chatId: string
): Promise<string> {
  switch (command) {
    case '/start':
      return '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–∞–Ω–∫ –ñ–µ–ª–∞–Ω–∏–π! üéØ\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n' +
        '/balance - –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å\n' +
        '/give @username green - –¥–∞—Ç—å –∑–µ–ª–µ–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ\n' +
        '/wishes - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è';
    
    case '/help':
      return 'üìñ <b>–ö–æ–º–∞–Ω–¥—ã –ë–∞–Ω–∫–∞ –ñ–µ–ª–∞–Ω–∏–π:</b>\n\n' +
        '/balance - –≤–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å\n' +
        '/give @username green|blue|red - –¥–∞—Ç—å –∂–µ–ª–∞–Ω–∏–µ\n' +
        '/wishes - –∞–∫—Ç–∏–≤–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è\n' +
        '/exchange green|blue - –æ–±–º–µ–Ω—è—Ç—å –∂–µ–ª–∞–Ω–∏—è\n\n' +
        'üíö –ó–µ–ª–µ–Ω—ã–µ (1) ‚Üí üíô –°–∏–Ω–∏–µ (10) ‚Üí ‚ù§Ô∏è –ö—Ä–∞—Å–Ω—ã–µ (100)';
    
    default:
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.';
  }
}