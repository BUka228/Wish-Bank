// Telegram Bot –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
let bot: any = null;

function getBot() {
  if (!bot && typeof window === 'undefined') {
    const TelegramBot = require('node-telegram-bot-api');
    bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN!, { polling: false });
  }
  return bot;
}

export interface TelegramUser {
  id: number;
  first_name: string;
  last_name?: string;
  username?: string;
}

export async function sendNotification(chatId: string, message: string) {
  try {
    const telegramBot = getBot();
    if (telegramBot) {
      await telegramBot.sendMessage(chatId, message, { parse_mode: 'HTML' });
    }
  } catch (error) {
    console.error('Telegram notification error:', error);
  }
}

export async function sendWishNotification(
  chatId: string,
  wishType: 'green' | 'blue' | 'red',
  description: string,
  fromUser: string
) {
  const emoji = {
    green: 'üíö',
    blue: 'üíô',
    red: '‚ù§Ô∏è'
  };
  
  const message = `${emoji[wishType]} <b>–ù–æ–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ!</b>\n\n` +
    `–û—Ç: ${fromUser}\n` +
    `–ñ–µ–ª–∞–Ω–∏–µ: ${description}\n\n` +
    `–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è–º–∏`;
    
  await sendNotification(chatId, message);
}

export async function sendBalanceUpdate(
  chatId: string,
  wishType: 'green' | 'blue' | 'red',
  amount: number,
  reason: string
) {
  const emoji = {
    green: 'üíö',
    blue: 'üíô',
    red: '‚ù§Ô∏è'
  };
  
  const message = `${emoji[wishType]} <b>–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n` +
    `+${amount} ${wishType} –∂–µ–ª–∞–Ω–∏–µ\n` +
    `–ü—Ä–∏—á–∏–Ω–∞: ${reason}`;
    
  await sendNotification(chatId, message);
}

export function createWebAppKeyboard() {
  return {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: 'üéØ –û—Ç–∫—Ä—ã—Ç—å –ë–∞–Ω–∫ –ñ–µ–ª–∞–Ω–∏–π',
            web_app: { url: process.env.VERCEL_URL || 'https://your-app.vercel.app' }
          }
        ]
      ]
    }
  };
}

export async function handleTelegramCommand(
  command: string,
  _args: string[],
  _user: TelegramUser,
  _chatId: string
): Promise<string> {
  switch (command) {
    case '/start':
      return '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–∞–Ω–∫ –ñ–µ–ª–∞–Ω–∏–π! üéØ\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n' +
        '/balance - –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å\n' +
        '/give @username green - –¥–∞—Ç—å –∑–µ–ª–µ–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ\n' +
        '/wishes - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è';
    
    case '/help':
      return 'üìñ <b>–ö–æ–º–∞–Ω–¥—ã –ë–∞–Ω–∫–∞ –ñ–µ–ª–∞–Ω–∏–π:</b>\n\n' +
        '/balance - –≤–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å\n' +
        '/give @username green|blue|red - –¥–∞—Ç—å –∂–µ–ª–∞–Ω–∏–µ\n' +
        '/wishes - –∞–∫—Ç–∏–≤–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è\n' +
        '/exchange green|blue - –æ–±–º–µ–Ω—è—Ç—å –∂–µ–ª–∞–Ω–∏—è\n\n' +
        'üíö –ó–µ–ª–µ–Ω—ã–µ (1) ‚Üí üíô –°–∏–Ω–∏–µ (10) ‚Üí ‚ù§Ô∏è –ö—Ä–∞—Å–Ω—ã–µ (100)';
    
    default:
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.';
  }
}