-- Rank System Initialization Script: Quest Economy System
-- Version: 007
-- Description: Initialize comprehensive Russian military rank system with privileges and bonuses

-- Clear existing ranks and insert complete Russian military hierarchy
DELETE FROM ranks;

-- Insert comprehensive Russian military rank system
INSERT INTO ranks (name, min_experience, daily_quota_bonus, weekly_quota_bonus, monthly_quota_bonus, emoji, special_privileges) VALUES
    -- Enlisted ranks (–†—è–¥–æ–≤–æ–π —Å–æ—Å—Ç–∞–≤)
    ('–†—è–¥–æ–≤–æ–π', 0, 0, 0, 0, 'ü™ñ', '{"description": "–ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥", "can_create_easy_quests": true}'),
    ('–ï—Ñ—Ä–µ–π—Ç–æ—Ä', 100, 1, 2, 5, 'üéñÔ∏è', '{"description": "–û–ø—ã—Ç–Ω—ã–π —Å–æ–ª–¥–∞—Ç", "can_create_medium_quests": true, "bonus_experience": 0.05}'),
    
    -- Non-commissioned officers (–°–µ—Ä–∂–∞–Ω—Ç—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤)
    ('–ú–ª–∞–¥—à–∏–π —Å–µ—Ä–∂–∞–Ω—Ç', 300, 2, 5, 10, 'üèÖ', '{"description": "–ú–ª–∞–¥—à–∏–π –∫–æ–º–∞–Ω–¥–∏—Ä", "can_create_hard_quests": true, "bonus_experience": 0.1, "can_approve_easy_shared_wishes": true}'),
    ('–°–µ—Ä–∂–∞–Ω—Ç', 600, 3, 8, 15, 'üéóÔ∏è', '{"description": "–ö–æ–º–∞–Ω–¥–∏—Ä –æ—Ç–¥–µ–ª–µ–Ω–∏—è", "can_create_epic_quests": true, "bonus_experience": 0.15, "can_approve_medium_shared_wishes": true}'),
    ('–°—Ç–∞—Ä—à–∏–π —Å–µ—Ä–∂–∞–Ω—Ç', 1000, 4, 12, 20, 'üèÜ', '{"description": "–°—Ç–∞—Ä—à–∏–π –∫–æ–º–∞–Ω–¥–∏—Ä", "can_approve_shared_wishes": true, "bonus_experience": 0.2, "can_modify_quest_rewards": true}'),
    ('–°—Ç–∞—Ä—à–∏–Ω–∞', 1500, 5, 15, 25, 'üëë', '{"description": "–ì–ª–∞–≤–Ω—ã–π —Å–µ—Ä–∂–∞–Ω—Ç", "can_modify_economy": true, "bonus_experience": 0.25, "can_create_special_quests": true}'),
    
    -- Warrant officers (–ü—Ä–∞–ø–æ—Ä—â–∏–∫–∏)
    ('–ü—Ä–∞–ø–æ—Ä—â–∏–∫', 2200, 6, 20, 35, '‚≠ê', '{"description": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "can_create_special_events": true, "bonus_experience": 0.3, "extended_quest_duration": true}'),
    ('–°—Ç–∞—Ä—à–∏–π –ø—Ä–∞–ø–æ—Ä—â–∏–∫', 3000, 8, 25, 45, 'üåü', '{"description": "–°—Ç–∞—Ä—à–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "unlimited_daily_gifts": true, "bonus_experience": 0.35, "can_mentor_lower_ranks": true}'),
    
    -- Junior officers (–ú–ª–∞–¥—à–∏–µ –æ—Ñ–∏—Ü–µ—Ä—ã)
    ('–ú–ª–∞–¥—à–∏–π –ª–µ–π—Ç–µ–Ω–∞–Ω—Ç', 4000, 10, 30, 60, 'üí´', '{"description": "–ú–ª–∞–¥—à–∏–π –æ—Ñ–∏—Ü–µ—Ä", "can_grant_bonuses": true, "bonus_experience": 0.4, "can_create_rank_quests": true}'),
    ('–õ–µ–π—Ç–µ–Ω–∞–Ω—Ç', 5500, 12, 40, 80, '‚ú®', '{"description": "–û—Ñ–∏—Ü–µ—Ä", "can_create_rank_quests": true, "bonus_experience": 0.5, "can_override_quotas": true}'),
    ('–°—Ç–∞—Ä—à–∏–π –ª–µ–π—Ç–µ–Ω–∞–Ω—Ç', 7500, 15, 50, 100, 'üå†', '{"description": "–°—Ç–∞—Ä—à–∏–π –æ—Ñ–∏—Ü–µ—Ä", "advanced_quest_creation": true, "bonus_experience": 0.6, "can_create_epic_events": true}'),
    
    -- Senior officers (–°—Ç–∞—Ä—à–∏–µ –æ—Ñ–∏—Ü–µ—Ä—ã)
    ('–ö–∞–ø–∏—Ç–∞–Ω', 10000, 18, 60, 120, '‚ö°', '{"description": "–ö–æ–º–∞–Ω–¥–∏—Ä —Ä–æ—Ç—ã", "company_command": true, "bonus_experience": 0.7, "can_modify_rank_requirements": true}'),
    ('–ú–∞–π–æ—Ä', 13000, 20, 70, 140, 'üî•', '{"description": "–°—Ç–∞—Ä—à–∏–π –æ—Ñ–∏—Ü–µ—Ä", "battalion_privileges": true, "bonus_experience": 0.8, "can_create_legendary_quests": true}'),
    ('–ü–æ–¥–ø–æ–ª–∫–æ–≤–Ω–∏–∫', 17000, 25, 80, 160, '‚öîÔ∏è', '{"description": "–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥–∏—Ä–∞", "deputy_command": true, "bonus_experience": 0.9, "unlimited_quest_creation": true}'),
    ('–ü–æ–ª–∫–æ–≤–Ω–∏–∫', 22000, 30, 100, 200, 'üõ°Ô∏è', '{"description": "–ö–æ–º–∞–Ω–¥–∏—Ä –ø–æ–ª–∫–∞", "regiment_command": true, "bonus_experience": 1.0, "can_grant_special_privileges": true}'),
    
    -- General officers (–ì–µ–Ω–µ—Ä–∞–ª—ã)
    ('–ì–µ–Ω–µ—Ä–∞–ª-–º–∞–π–æ—Ä', 30000, 40, 120, 250, 'üéñÔ∏è', '{"description": "–ú–ª–∞–¥—à–∏–π –≥–µ–Ω–µ—Ä–∞–ª", "general_privileges": true, "bonus_experience": 1.2, "can_modify_system_settings": true}'),
    ('–ì–µ–Ω–µ—Ä–∞–ª-–ª–µ–π—Ç–µ–Ω–∞–Ω—Ç', 40000, 50, 150, 300, 'üèÖ', '{"description": "–ì–µ–Ω–µ—Ä–∞–ª", "senior_general_privileges": true, "bonus_experience": 1.5, "unlimited_system_access": true}'),
    ('–ì–µ–Ω–µ—Ä–∞–ª-–ø–æ–ª–∫–æ–≤–Ω–∏–∫', 55000, 60, 180, 350, 'üéóÔ∏è', '{"description": "–°—Ç–∞—Ä—à–∏–π –≥–µ–Ω–µ—Ä–∞–ª", "high_command": true, "bonus_experience": 2.0, "can_create_system_events": true}'),
    ('–ì–µ–Ω–µ—Ä–∞–ª –∞—Ä–º–∏–∏', 75000, 80, 200, 400, 'üèÜ', '{"description": "–í—ã—Å—à–∏–π –≥–µ–Ω–µ—Ä–∞–ª", "army_command": true, "bonus_experience": 2.5, "ultimate_privileges": true}'),
    
    -- Marshal (–ú–∞—Ä—à–∞–ª)
    ('–ú–∞—Ä—à–∞–ª', 100000, 100, 250, 500, 'üëë', '{"description": "–í—ã—Å—à–µ–µ –≤–æ–∏–Ω—Å–∫–æ–µ –∑–≤–∞–Ω–∏–µ", "marshal_privileges": true, "bonus_experience": 3.0, "god_mode": true}');

-- Create function to get user rank based on experience
CREATE OR REPLACE FUNCTION get_user_rank(user_experience INTEGER)
RETURNS TEXT AS $$
DECLARE
    user_rank TEXT;
BEGIN
    SELECT name INTO user_rank
    FROM ranks
    WHERE min_experience <= user_experience
    ORDER BY min_experience DESC
    LIMIT 1;
    
    RETURN COALESCE(user_rank, '–†—è–¥–æ–≤–æ–π');
END;
$$ LANGUAGE plpgsql;

-- Create function to get next rank info
CREATE OR REPLACE FUNCTION get_next_rank_info(current_experience INTEGER)
RETURNS TABLE(
    next_rank_name TEXT,
    experience_needed INTEGER,
    progress_percentage NUMERIC
) AS $$
DECLARE
    current_rank_exp INTEGER;
    next_rank_exp INTEGER;
    next_rank TEXT;
BEGIN
    -- Get current rank minimum experience
    SELECT min_experience INTO current_rank_exp
    FROM ranks
    WHERE min_experience <= current_experience
    ORDER BY min_experience DESC
    LIMIT 1;
    
    -- Get next rank info
    SELECT name, min_experience INTO next_rank, next_rank_exp
    FROM ranks
    WHERE min_experience > current_experience
    ORDER BY min_experience ASC
    LIMIT 1;
    
    -- If no next rank, return current as max
    IF next_rank IS NULL THEN
        SELECT name INTO next_rank
        FROM ranks
        ORDER BY min_experience DESC
        LIMIT 1;
        next_rank_exp := current_experience;
    END IF;
    
    RETURN QUERY SELECT 
        next_rank,
        GREATEST(0, next_rank_exp - current_experience),
        CASE 
            WHEN next_rank_exp = current_rank_exp THEN 100.0
            ELSE ROUND(((current_experience - current_rank_exp)::NUMERIC / (next_rank_exp - current_rank_exp)::NUMERIC) * 100, 2)
        END;
END;
$$ LANGUAGE plpgsql;

-- Create function to get rank privileges
CREATE OR REPLACE FUNCTION get_rank_privileges(rank_name TEXT)
RETURNS JSONB AS $$
DECLARE
    privileges JSONB;
BEGIN
    SELECT special_privileges INTO privileges
    FROM ranks
    WHERE name = rank_name;
    
    RETURN COALESCE(privileges, '{}'::JSONB);
END;
$$ LANGUAGE plpgsql;

-- Create function to check if user has specific privilege
CREATE OR REPLACE FUNCTION user_has_privilege(user_rank TEXT, privilege_name TEXT)
RETURNS BOOLEAN AS $$
DECLARE
    privileges JSONB;
BEGIN
    SELECT special_privileges INTO privileges
    FROM ranks
    WHERE name = user_rank;
    
    RETURN COALESCE((privileges ->> privilege_name)::BOOLEAN, FALSE);
END;
$$ LANGUAGE plpgsql;

-- Update all existing users to have correct ranks based on their experience
UPDATE users 
SET rank = get_user_rank(experience_points)
WHERE experience_points > 0;

-- Create view for user rank information
CREATE OR REPLACE VIEW user_rank_info AS
SELECT 
    u.id,
    u.name,
    u.experience_points,
    u.rank as current_rank,
    r.emoji as rank_emoji,
    r.daily_quota_bonus,
    r.weekly_quota_bonus,
    r.monthly_quota_bonus,
    r.special_privileges,
    (SELECT next_rank_name FROM get_next_rank_info(u.experience_points)) as next_rank,
    (SELECT experience_needed FROM get_next_rank_info(u.experience_points)) as experience_to_next_rank,
    (SELECT progress_percentage FROM get_next_rank_info(u.experience_points)) as rank_progress_percentage
FROM users u
LEFT JOIN ranks r ON u.rank = r.name;

-- Log migration completion
INSERT INTO migrations (filename) VALUES ('007_rank_system_init.sql')
ON CONFLICT (filename) DO NOTHING;